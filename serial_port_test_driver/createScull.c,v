head	1.32;
access;
symbols;
locks
	emblogic:1.32; strict;
comment	@ * @;


1.32
date	2017.12.05.05.51.58;	author kartikgupta;	state Exp;
branches;
next	1.31;

1.31
date	2017.12.05.05.48.06;	author kartikgupta;	state Exp;
branches;
next	1.30;

1.30
date	2017.12.05.05.44.15;	author kartikgupta;	state Exp;
branches;
next	1.29;

1.29
date	2017.12.05.05.29.33;	author kartikgupta;	state Exp;
branches;
next	1.28;

1.28
date	2017.12.05.05.28.22;	author kartikgupta;	state Exp;
branches;
next	1.27;

1.27
date	2017.12.05.05.26.40;	author kartikgupta;	state Exp;
branches;
next	1.26;

1.26
date	2017.12.05.05.23.39;	author kartikgupta;	state Exp;
branches;
next	1.25;

1.25
date	2017.12.05.05.16.33;	author kartikgupta;	state Exp;
branches;
next	1.24;

1.24
date	2017.12.04.15.37.15;	author kartikgupta;	state Exp;
branches;
next	1.23;

1.23
date	2017.12.04.08.17.28;	author kartikgupta;	state Exp;
branches;
next	1.22;

1.22
date	2017.12.04.07.33.21;	author kartikgupta;	state Exp;
branches;
next	1.21;

1.21
date	2017.12.04.07.27.17;	author kartikgupta;	state Exp;
branches;
next	1.20;

1.20
date	2017.12.04.07.20.26;	author kartikgupta;	state Exp;
branches;
next	1.19;

1.19
date	2017.12.04.07.10.04;	author kartikgupta;	state Exp;
branches;
next	1.18;

1.18
date	2017.12.04.07.02.40;	author kartikgupta;	state Exp;
branches;
next	1.17;

1.17
date	2017.12.04.07.00.10;	author kartikgupta;	state Exp;
branches;
next	1.16;

1.16
date	2017.12.04.06.58.45;	author kartikgupta;	state Exp;
branches;
next	1.15;

1.15
date	2017.12.04.06.51.36;	author kartikgupta;	state Exp;
branches;
next	1.14;

1.14
date	2017.12.04.06.42.38;	author kartikgupta;	state Exp;
branches;
next	1.13;

1.13
date	2017.12.04.06.40.51;	author kartikgupta;	state Exp;
branches;
next	1.12;

1.12
date	2017.12.04.06.38.30;	author kartikgupta;	state Exp;
branches;
next	1.11;

1.11
date	2017.12.04.06.35.27;	author kartikgupta;	state Exp;
branches;
next	1.10;

1.10
date	2017.12.04.06.28.48;	author kartikgupta;	state Exp;
branches;
next	1.9;

1.9
date	2017.12.04.06.19.55;	author kartikgupta;	state Exp;
branches;
next	1.8;

1.8
date	2017.12.04.06.05.47;	author kartikgupta;	state Exp;
branches;
next	1.7;

1.7
date	2017.12.04.05.57.20;	author kartikgupta;	state Exp;
branches;
next	1.6;

1.6
date	2017.12.04.05.53.27;	author kartikgupta;	state Exp;
branches;
next	1.5;

1.5
date	2017.12.04.05.37.47;	author kartikgupta;	state Exp;
branches;
next	1.4;

1.4
date	2017.12.04.05.35.29;	author kartikgupta;	state Exp;
branches;
next	1.3;

1.3
date	2017.12.03.17.34.38;	author kartikgupta;	state Exp;
branches;
next	1.2;

1.2
date	2017.12.03.17.21.32;	author kartikgupta;	state Exp;
branches;
next	1.1;

1.1
date	2017.12.03.16.27.44;	author kartikgupta;	state Exp;
branches;
next	;


desc
@@


1.32
log
@*** empty log message ***
@
text
@#include"header.h"
#include"declaration.h"

Qset* createScull(int noi,int noq)
{
    Qset *lsqset=NULL;
    Qset *tempqset=NULL;
    int i=0,j,count=0;
    
    #ifdef DEBUG
    printk(KERN_INFO "%s :Begin\n",__func__);
    #endif
    
    for(i=0;i<noi;i++)
     {
                
              tempqset=(Qset*)kmalloc(sizeof(Qset),GFP_KERNEL);
              if(!tempqset)
               {
    		#ifdef DEBUG
    		printk(KERN_INFO "kmalloc:\n");
    		#endif
                goto ERR;
               }
                
               if(i==0)
                 lsqset=tempqset;
               if(i!=noi-1)
                 tempqset=tempqset->next;  
     }    
     
      tempqset=memset(tempqset,'\0',sizeof(Qset));    
      tempqset=lsqset;

      for(i=0;i<noi;i++)
       {
                
                tempqset->data=kmalloc(register_no*sizeof(char*),GFP_KERNEL); 
    		
              if(!(tempqset->data))
               {
    	        #ifdef DEBUG
    		printk(KERN_INFO "kmalloc:\n");
    		#endif
                goto ERR;
               }
               
                memset(tempqset->data,'\0',register_no*sizeof(char*));
                 
                 for(j=0;j<register_no;j++)
                  {                        
              		tempqset->data[j]=(char*)kmalloc(register_size*sizeof(char),GFP_KERNEL); 
              		if(!(tempqset->data[j]))
              		 {
    	        	  #ifdef DEBUG
    			  printk(KERN_INFO "kmalloc:\n");
    		          #endif
                          goto ERR;
                         }
                           memset(tempqset->data[j],'\0',register_size*sizeof(char));

                     count++;
                     if(count==noq)
                     break;
                   }
  
               tempqset=tempqset->next;
        }
        
         tempqset=lsqset;
                
               while(tempqset)
               {
                 #ifdef DEBUG
    		 printk(KERN_INFO "node address %p\n",tempqset);
    		 #endif
                 tempqset=tempqset->next;     
               } 
          
    #ifdef DEBUG
    printk(KERN_INFO "%s :End\n",__func__);
    #endif
    return lsqset;

    ERR:  

    #ifdef DEBUG
    printk(KERN_INFO "%s :End with error\n",__func__);
    #endif
    return (Qset*)-1;
}

@


1.31
log
@*** empty log message ***
@
text
@a17 3
                 #ifdef DEBUG
    		 printk(KERN_INFO "node address for i %d-->> %p\n",i,tempqset);
    		 #endif
a31 3
                 #ifdef DEBUG
    		 printk(KERN_INFO "node address    -->> %p\n",tempqset);
    		 #endif
a32 3
                 #ifdef DEBUG
    		 printk(KERN_INFO "node address    -->> %p\n",tempqset->next);
    		 #endif
@


1.30
log
@*** empty log message ***
@
text
@d40 1
a40 1
    		 printk(KERN_INFO "node address    -->> %p\n",tempqset);
@


1.29
log
@*** empty log message ***
@
text
@d31 2
a32 2
              
               tempqset=tempqset->next;  
@


1.28
log
@*** empty log message ***
@
text
@d38 1
a38 1
      memset(tempqset,'\0',sizeof(Qset));    
@


1.27
log
@*** empty log message ***
@
text
@d36 1
a36 1
    		 printk(KERN_INFO "node address-->> %p\n",tempqset);
d39 3
@


1.26
log
@*** empty log message ***
@
text
@d19 1
a19 1
    		 printk(KERN_INFO "node address fo i %d-->> %p\n",i,tempqset);
d35 3
@


1.25
log
@*** empty log message ***
@
text
@d18 3
a42 5
                #ifdef DEBUG1
    		printk(KERN_INFO "node address %p",tempqset);
    		printk(KERN_INFO "allocated qset array address %p",tempqset->data);
    		#endif

@


1.24
log
@*** empty log message ***
@
text
@d77 7
a83 3
                #ifdef DEBUG
    		printk(KERN_INFO "ldev->sqset ,node address %p\n",lsqset);
    		#endif
@


1.23
log
@*** empty log message ***
@
text
@a36 4
    		#ifdef DEBUG1
    		printk(KERN_INFO "node address %p",tempqset);
    		printk(KERN_INFO "qset array address %p",tempqset->data);
    		#endif
d76 4
@


1.22
log
@*** empty log message ***
@
text
@a15 4
             
    	        #ifdef DEBUG
    		printk(KERN_INFO "tempqset before mem alln %p",tempqset);
    		#endif
d17 1
a17 6
                tempqset=(Qset*)kmalloc(sizeof(Qset),GFP_KERNEL);

    		#ifdef DEBUG
    		printk(KERN_INFO "created node address %p",tempqset);
    		#endif

d31 2
a32 17
               memset(tempqset,'\0',sizeof(Qset));
         
      tempqset=lsqset;

    		#ifdef DEBUG
    		printk(KERN_INFO "tempqset address %p",tempqset);
    		printk(KERN_INFO "lsqset   address %p",lsqset);
    		#endif

      for(i=0;i<noi;i++)
       {
    		#ifdef DEBUG
    		printk(KERN_INFO "nodes address (Qset Struct) %p\n",tempqset);
    		#endif
                tempqset=tempqset->next;
       }

d37 1
a37 1
    		#ifdef DEBUG
d44 1
a44 1
                #ifdef DEBUG
d60 1
a60 2
                  {
                        
d74 2
a75 2
                   }  

d86 1
a86 1
   ERR:  
@


1.21
log
@*** empty log message ***
@
text
@d21 1
a21 1
              tempqset=(Qset*)kmalloc(sizeof(Qset),GFP_KERNEL);
a37 1
               memset(tempqset,'\0',sizeof(Qset));
d40 1
@


1.20
log
@*** empty log message ***
@
text
@d16 2
a17 3
          if(i==0)
           {
    		#ifdef DEBUG
d20 3
a22 1
              lsqset=tempqset=(Qset*)kmalloc(sizeof(Qset),GFP_KERNEL);
d26 2
a27 1
              if(!lsqset)
d34 3
a39 21
            }
          else
           {
    		#ifdef DEBUG
    		printk(KERN_INFO "tempqset before mem alln %p",tempqset);
    		#endif
              tempqset=(Qset*)kmalloc(sizeof(Qset),GFP_KERNEL);
    		#ifdef DEBUG
    		printk(KERN_INFO "created node address %p",tempqset);
    		#endif
              if(!(tempqset))
               {
    		#ifdef DEBUG
    		printk(KERN_INFO "kmalloc:\n");
    		#endif
                goto ERR;
               } 

              memset(tempqset,'\0',sizeof(Qset));
              tempqset=tempqset->next; 
            }
@


1.19
log
@*** empty log message ***
@
text
@d18 3
d38 3
d59 1
d72 1
@


1.18
log
@*** empty log message ***
@
text
@d20 1
a20 1
    		printk(KERN_INFO "nodes address %p",tempqset);
d30 1
a30 1
               memset(lsqset,'\0',sizeof(Qset));
d37 1
a37 1
    		printk(KERN_INFO "nodes address %p",tempqset);
d53 5
@


1.17
log
@*** empty log message ***
@
text
@d56 1
a56 1
    		printk(KERN_INFO "nodes address %p\n",tempqset);
@


1.16
log
@*** empty log message ***
@
text
@d56 1
a56 1
    		printk(KERN_INFO "nodes address %p",tempqset);
@


1.15
log
@*** empty log message ***
@
text
@d20 1
a20 1
    		printk(KERN_INFO "nodes address value %p",tempqset);
d37 1
a37 1
    		printk(KERN_INFO "nodes address value %p",tempqset);
d53 8
d65 2
a66 2
    		printk(KERN_INFO "value %p",tempqset);
    		printk(KERN_INFO "value %p",tempqset->data);
d72 2
a73 2
    		printk(KERN_INFO "value %p",tempqset);
    		printk(KERN_INFO "value %p",tempqset->data);
@


1.14
log
@*** empty log message ***
@
text
@a38 1

d48 1
a48 2
              tempqset=tempqset->next;
              
a56 3
    		printk(KERN_INFO "DEBUG1\n");
    		#endif
    		#ifdef DEBUG
d60 1
d62 3
a64 4
    		#ifdef DEBUG
    		printk(KERN_INFO "DEBUG2\n");
    		#endif
    		#ifdef DEBUG
@


1.13
log
@*** empty log message ***
@
text
@d19 3
d36 3
a51 3
    		#ifdef DEBUG
    		printk(KERN_INFO "nodes address value %p",tempqset);
    		#endif
@


1.12
log
@*** empty log message ***
@
text
@d46 3
@


1.11
log
@*** empty log message ***
@
text
@d56 1
@


1.10
log
@*** empty log message ***
@
text
@d74 1
a74 2
                memset(tempqset->data,'\0',sizeof(char*));
                //tempqset->data=memset(tempqset->data,'\0',sizeof(char*));
d87 1
a87 2
                           memset(tempqset->data[j],'\0',sizeof(char*));
                         //tempqset->data[j]=memset(tempqset->data[j],'\0',sizeof(char*));
@


1.9
log
@*** empty log message ***
@
text
@d55 4
a58 1
              tempqset->data=kmalloc(register_no*sizeof(char*),GFP_KERNEL); 
d62 4
@


1.8
log
@*** empty log message ***
@
text
@a27 1
               //lsqset=tempqset=memset(lsqset,'\0',sizeof(Qset));
d32 1
a32 7
    		#ifdef DEBUG
    		printk(KERN_INFO "DEBUG2\n");
    		#endif
              	tempqset=(Qset*)kmalloc(sizeof(Qset),GFP_KERNEL);
    		#ifdef DEBUG
    		printk(KERN_INFO "DEBUG3\n");
    		#endif
a42 3
    		#ifdef DEBUG
    		printk(KERN_INFO "DEBUG4\n");
    		#endif
a43 3
    	        #ifdef DEBUG
    		printk(KERN_INFO "DEBUG5\n");
    		#endif
a44 1
                //tempqset->next=memset(tempqset->next,'\0',sizeof(Qset));
a45 9
    	        #ifdef DEBUG
    		printk(KERN_INFO "DEBUG6\n");
    		#endif

              /*if(i==noi-1) 
              {
                //tempqset->next=NULL;                       
                tempqset->next=(void*)0;                       
               }*/
d47 1
a47 1
              
d49 1
d52 3
d56 3
@


1.7
log
@*** empty log message ***
@
text
@d29 1
a29 4
              tempqset=tempqset->next;  
    	      #ifdef DEBUG
    	       printk(KERN_INFO "DEBUG1\n");
    	      #endif
d48 1
d60 4
@


1.6
log
@*** empty log message ***
@
text
@d52 3
d56 5
a60 1
              //tempqset->next=memset(tempqset->next,'\0',sizeof(Qset));
@


1.5
log
@*** empty log message ***
@
text
@d26 7
a32 3
                
              memset(lsqset,'\0',sizeof(Qset));
              //lsqset=tempqset=memset(lsqset,'\0',sizeof(Qset));
d37 1
a37 1
    		printk(KERN_INFO "DEBUG1\n");
d39 1
a39 1
              	tempqset->next=(Qset*)kmalloc(sizeof(Qset),GFP_KERNEL);
d41 1
a41 1
    		printk(KERN_INFO "DEBUG2\n");
d44 1
a44 1
              if(!(tempqset->next))
d51 2
a52 1
              memset(tempqset->next,'\0',sizeof(Qset));
a54 1
              tempqset=tempqset->next;
@


1.4
log
@*** empty log message ***
@
text
@d32 8
a39 1
              tempqset->next=(Qset*)kmalloc(sizeof(Qset),GFP_KERNEL);
@


1.3
log
@*** empty log message ***
@
text
@d27 1
d40 1
d63 2
a64 1
               //tempqset->data=memset(tempqset->data,'\0',sizeof(char*));
d77 2
a78 1
                 //        tempqset->data[j]=memset(tempqset->data[j],'\0',sizeof(char*));
@


1.2
log
@scull memory is allocated with memset fun used
@
text
@d27 1
a27 1
              lsqset=tempqset=memset(lsqset,'\0',sizeof(Qset));
d39 1
a39 1
              tempqset->next=memset(tempqset->next,'\0',sizeof(Qset));
d61 1
a61 1
               tempqset->data=memset(tempqset->data,'\0',sizeof(char*));
d74 1
a74 1
                         tempqset->data[j]=memset(tempqset->data[j],'\0',sizeof(char*));
@


1.1
log
@Initial revision
@
text
@d26 2
d39 1
a40 1

d42 1
a42 1
              if(i==noi-1) 
d46 1
a46 1
               }
d49 1
a49 2
       tempqset=lsqset;

d60 2
d74 2
@
