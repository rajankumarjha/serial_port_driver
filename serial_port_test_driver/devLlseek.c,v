head	1.13;
access;
symbols;
locks
	emblogic:1.13; strict;
comment	@ * @;


1.13
date	2018.01.06.07.23.36;	author emblogic;	state Exp;
branches;
next	1.12;

1.12
date	2017.12.07.05.55.47;	author kartikgupta;	state Exp;
branches;
next	1.11;

1.11
date	2017.12.05.09.03.40;	author kartikgupta;	state Exp;
branches;
next	1.10;

1.10
date	2017.12.05.07.43.47;	author kartikgupta;	state Exp;
branches;
next	1.9;

1.9
date	2017.12.05.07.39.17;	author kartikgupta;	state Exp;
branches;
next	1.8;

1.8
date	2017.12.05.06.25.39;	author kartikgupta;	state Exp;
branches;
next	1.7;

1.7
date	2017.12.04.09.56.13;	author kartikgupta;	state Exp;
branches;
next	1.6;

1.6
date	2017.12.03.16.27.45;	author kartikgupta;	state Exp;
branches;
next	1.5;

1.5
date	2017.11.30.08.17.10;	author kartikgupta;	state Exp;
branches;
next	1.4;

1.4
date	2017.11.29.12.50.45;	author kartikgupta;	state Exp;
branches;
next	1.3;

1.3
date	2017.11.29.12.18.32;	author kartikgupta;	state Exp;
branches;
next	1.2;

1.2
date	2017.11.25.10.55.08;	author kartikgupta;	state Exp;
branches;
next	1.1;

1.1
date	2017.11.24.10.11.46;	author kartikgupta;	state Exp;
branches;
next	;


desc
@@


1.13
log
@*** empty log message ***
@
text
@#include"header.h"
#include"declaration.h"

loff_t devLlseek(struct file *filp,loff_t offset,int origin)
{
    Dev *ldev;
    
    #ifdef DEBUG
    printk(KERN_INFO "%s :Begin\n",__func__);
    #endif
    
    ldev=filp->private_data;
    #ifdef DEBUG
    printk(KERN_INFO "ldev address is: %p\n",ldev);
    #endif

    #ifdef DEBUG
    printk(KERN_INFO "offset is %d and origin is %d\n",(int)offset,origin);
    #endif
    
    //if(down_interruptible(&ldev->sem))
      // return -ERESTARTSYS;

    switch(origin)
     {
         case 0:
    		#ifdef DEBUG
    		printk(KERN_INFO "SEEK_SET Mode\n");
                #endif 
                if(offset>=0)
                {
                	if(offset>=ldev->device_size)
                	 {
    				#ifdef DEBUG
    				printk(KERN_INFO "Offset too big\n");
                		#endif 
                	 }

                	else
                		filp->f_pos=offset;  
		}
                else
                 {
    			#ifdef DEBUG
    			printk(KERN_INFO "Offset is negative\n");
                	#endif 
                     
                 }    
                break;

         case 1:
    		#ifdef DEBUG
    		printk(KERN_INFO "SEEK_CUR Mode\n");
                #endif
                if(offset<0)
                 {      
                      if(filp->f_pos+offset<=0)
    			{
 				#ifdef DEBUG
    				printk(KERN_INFO "Offset too small\n");
                		#endif
                        }
                      else
                            filp->f_pos=filp->f_pos+offset;
                 }
                if(offset>0)
                 {      
                      if(filp->f_pos+offset>=device_size)
    			{
 				#ifdef DEBUG
    				printk(KERN_INFO "Offset too Big\n");
                		#endif
                        } 
                      else
			filp->f_pos=filp->f_pos+offset;  
                 }
                
                break;  
 
         case 2:
    		#ifdef DEBUG
    		printk(KERN_INFO "SEEK_END Mode\n");
                #endif  
                if(offset>0) 
                   {
 			#ifdef DEBUG
    			printk(KERN_INFO "Offset is positive\n");
                	#endif
                   }
                else
               	   filp->f_pos=data_size+offset;  

                break;
     }
     
    //up(&ldev->sem);
     
    #ifdef DEBUG
    printk(KERN_INFO "file_pos at: %lld\n",filp->f_pos);
    #endif    

    #ifdef DEBUG
    printk(KERN_INFO "%s :End\n",__func__);
    #endif

    return 0;

}

@


1.12
log
@*** empty log message ***
@
text
@d21 2
a22 2
    if(down_interruptible(&ldev->sem))
       return -ERESTARTSYS;
d96 1
a96 1
    up(&ldev->sem);
@


1.11
log
@*** empty log message ***
@
text
@d20 3
d95 3
a97 1
    
@


1.10
log
@*** empty log message ***
@
text
@d27 1
a27 1
                if(offset>0)
@


1.9
log
@*** empty log message ***
@
text
@d27 13
a39 1
                if(offset>=ldev->device_size)
d42 1
a42 1
    			printk(KERN_INFO "Offset too big\n");
d44 2
a45 4
                 }

                else
                	filp->f_pos=offset;  
@


1.8
log
@*** empty log message ***
@
text
@d53 1
a53 1
                if(offset<0)
d55 1
a55 1
                      if(filp->f_pos+offset<=0)
d58 1
a58 1
    				printk(KERN_INFO "Offset too small\n");
@


1.7
log
@*** empty log message ***
@
text
@d27 9
a35 1
                filp->f_pos=offset;  
d37 1
d42 25
a66 2
                filp->f_pos=filp->f_pos+offset;  
                break;   
d70 10
a79 2
                #endif   
                filp->f_pos=data_size+offset;  
@


1.6
log
@*** empty log message ***
@
text
@d27 1
a27 1
                filp->f_pos=0+offset;  
@


1.5
log
@*** empty log message ***
@
text
@a4 1

d39 1
a39 1
                filp->f_pos=data_size-offset;  
@


1.4
log
@*** empty log message ***
@
text
@d22 21
a42 9
    /*lsize=*loffptr;
 
    #ifdef DEBUG
    printk(KERN_INFO "file_pos at: %ld\n",filp->f_pos);
    printk(KERN_INFO "file_pos at: %ld\n",(*loffptr));
    printk(KERN_INFO "data_size on device is: %d\n",data_size);
    #endif
    

d45 2
a46 3
    printk(KERN_INFO "file_pos at: %ld\n",filp->f_pos);
    printk(KERN_INFO "file_pos at: %ld\n",(*loffptr));
    #endif*/
@


1.3
log
@*** empty log message ***
@
text
@d19 1
a19 1
    printk(KERN_INFO "offset is %d and origin is %d\n",offset,origin);
@


1.2
log
@*** empty log message ***
@
text
@d4 2
a5 1
loff_t devLlseek(struct file *filp,loff_t offset,int whence)
d16 4
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
    printk(KERN_INFO "ldev address is: %x\n",(unsigned int)ldev);
@
